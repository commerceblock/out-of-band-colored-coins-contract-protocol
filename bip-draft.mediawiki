<pre>
  BIP: 999*
  Layer: Applications
  Title: Pay to Contract Protocol
  Author: Omar Shibli <omar@commerceblock.com>
          Nicholas Gregory <nicholas@commerceblock.com>
  Comments-Summary: No comments yet.
  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0999
  Status: Draft
  Type: Informational Track
  Created: 2017-07-17
</pre>

&ast; 999 is a temporary BIP number.

==Abstract==

This document describes a key derivation scheme based on Timo Hanke and Ilja Gerhardt paper "Homomorphic Payment Addresses and the Pay-to-Contract Protocol" with reference to hierarchical deterministic wallets as described in BIP-0032 (BIP32 from now on) and the "Purpose Field" in BIP-0043.

This BIP is a particular application of BIP-0043 and is based on BIP-0044.

The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted as described in RFC 2119. 

==Motivation==

A Bitcoin transaction represents a "real world" contract between two parties to transfer value. The payer may want cryptographic proof that the payee has agreed to the terms of this contract. Using the technique described in this BIP, an address can be provably derived from the terms of a contract in a completely hidden manner which does not bloat the UTXO. This scheme can also be used as a foundation for a variety of protocols, such as advanced color coin schemes.

==Specification==

We define the following levels in BIP32 path:

<code>
m / purpose' / coin_type' / contract_id' / *
</code>

Apostrophe in the path indicates that BIP32 hardened derivation is used.

Each level has special meaning described in the chapters below.

===Purpose===

Purpose is a constant set to <code>999'</code> (or <code>0x800003E7</code>) following the BIP-0043 recommendation. It indicates that the subtree of this node is used according to this specification.

<code>
m / 999' / *
</code>

Hardened derivation is used at this level.

===Coin type===

The coin type field is identical to the same field in BIP-0044.

Hardened derivation is used at this level.

===Contract Id===

Contract id is an arbitrary number within the valid range of indices as defined in BIP32.

Hardened derivation is used at this level.

===Contract Base Derivation===

Contract base is the the public part of address, which is for a given <code>coin_type</code> and <code>contract_id</code> is derived by following path:

  m / 999' / coin_type' / contract_id'


===Contract Address Generation===

For a given contract documents denoted by c<sub>1</sub> ,...,c<sub>n</sub>, contract base extended public key denoted by contract_base<sub>pub</sub></code>, and cryptographic hash function denoted by <code>h</code>.

1. Compute cryptographic signatures for all contract documents, by applying the hash function.

  h(c1),...,h(cn)

2. Sort all signatures lexicographically.

  s1,...,sn

3. Concatenate the sorted signatures and apply the hash function.

  h(s1+...+sn)

4. Compute a partial BIP32 derivation path from the combined signature s<sub>all</sub> as defined in Hash to Partial Derivation Path Mapping procedure below.

  contract_signature

5. Prepend contract_base<sub>pub</sub> to contract_signature derivation path.

  contract_base_pub / contract_signature
  or
  m / 999' / coin_type' / contract_id' / contract_signature

6. Compute public extended key from the derivation path in step 5.

7. Compute address of the public extended key (P2PKH) from step 6.

===Contract Address Verification===

For a given Bitcoin address, contract base extended public key denoted by contract_base<sub>pub</sub>, contract documents denoted by c<sub>1</sub>,...,c<sub>n</sub>, and cryptographic hash function denoted by <code>h</code>, we can verify the integrity of the address by the following steps:

1. Compute contract address from the given inputs as described in Contract Address Generation section.

2. Compare the computed address from step 1 with the given Bitcoin address as an input.

===Hash to Partial Derivation Path Mapping===

At this section, we define hash to partial BIP32 derivation path mapping procedure that maps between an arbitrary hex number to a partial BIP32 derivation path.

For a given number, do the following:

1. Partition the number into parts, each part length should be 16.

2. Convert each part to integer in decimal format.

3. Concatenate all numbers with slash <code>/</code>.

==Examples==

For the following given inputs:

  master private extended key:
  xprv9s21ZrQH143K2JF8RafpqtKiTbsbaxEeUaMnNHsm5o6wCW3z8ySyH4UxFVSfZ8n7ESu7fgir8imbZKLYVBxFPND1pniTZ81vKfd45EHKX73
  coin type:
  0
  contract id:
  7777777

we can compute contract base as follows:

  contract base derivation path:
  m/999'/0'/7777777'
  contract base public extended key:
  xpub6CMCS9rY5GKdkWWyoeXEbmJmxGgDcbihofyARxucufdw7k3oc1JNnniiD5H2HynKBwhaem4KnPTue6s9R2tcroqkHv7vpLFBgbKRDwM5WEE

In the below examples, we are going to use SHA256 as a cryptographic hash function, and the above contract base public key.

contract address generation:

As an input, we have a contract that consists of two documents, below are contents:

  document 1:
  bar
  document 2:
  foo

1. Apply the hash function:

  document 1:
  fcde2b2edba56bf408601fb721fe9b5c338d10ee429ea04fae5511b68fbf8fb9
  document 2:
  2c26b46b68ffc68ff99b453c1d30413413422d706483bfa0f98a5e886266e7ae


2. Sort all signatures lexicographically:

  2c26b46b68ffc68ff99b453c1d30413413422d706483bfa0f98a5e886266e7ae
  fcde2b2edba56bf408601fb721fe9b5c338d10ee429ea04fae5511b68fbf8fb9

3. Concatenate signatures and apply the hash function.

  concatenated hash:
  2c26b46b68ffc68ff99b453c1d30413413422d706483bfa0f98a5e886266e7aefcde2b2edba56bf408601fb721fe9b5c338d10ee429ea04fae5511b68fbf8fb9
  combined signature:
  ec321de56af3b66fb49e89cfe346562388af387db689165d6f662a3950286a57

4. Compute the partial BIP32 derivation path of the combined signature.

  60466/7653/27379/46703/46238/35279/58182/22051/34991/14461/46729/5725/28518/10809/20520/27223

5. Prepend contract_base<sub>pub</sub> to contract_signature derivation path.

  contract_base_pub/60466/7653/27379/46703/46238/35279/58182/22051/34991/14461/46729/5725/28518/10809/20520/27223
  or
  m/999'/0'/7777777'/60466/7653/27379/46703/46238/35279/58182/22051/34991/14461/46729/5725/28518/10809/20520/27223

6. Compute public extended key.

  xpub6j7Ls3F4HMsoKJGVTHxTaJsqTEf6sqRtBYmFFLWcwj2oZ4erMtL7bxfNykbEGD7s11UbkUbSNwcKths4p2JuDmmzBzwEGMW7ZQpy9Y4pPrR

7. Compute address of the public extended key (P2PKH).

  1F4eY8QQUjz5KFJHFmEAxpPUgYj2H3AtBE


verification example 1 (negative test):

As an input, we have a contract that consists of one document, below is content:

  document 1:
  baz

1. Apply the hash function.

  baa5a0964d3320fbc0c6a922140453c8513ea24ab8fd0577034804a967248096

2. Apply the hash function second time (list of one item).

  3a08605829413ce0bf551b08d21e4a28dbda6e407f90eff1c448e839050c73a1

3. Compute the partial derivation path.

  14856/24664/10561/15584/48981/6920/53790/18984/56282/28224/32656/61425/50248/59449/1292/29601

4. Prepend contract_base<sub>pub</sub> to contract_signature derivation path.

  contract_base_pub/14856/24664/10561/15584/48981/6920/53790/18984/56282/28224/32656/61425/50248/59449/1292/29601
  or
  m/999'/0'/7777777'/14856/24664/10561/15584/48981/6920/53790/18984/56282/28224/32656/61425/50248/59449/1292/29601

5. Compute public extended key.

  xpub6ih31Zs8aCKfcSTud4aii4BZNS5BaVhq5z2QC6WCQnSqdFFQKUHYCEqbr7WGAKSxwcnGwSkpumZwDTZQzKSirCLPM6qtqvPMVCRwy1R8E5V

7. Compute address of the public extended key (P2PKH).

  1BuK3k14woP623Jyxow9QNhKptcvgd9Rwp

8. Compare the address from step 7 with the given address as an input.

Address matching failed as expected, verification operation will succeed only if we use identical documents to ones that have been used in the contract address generation.

==Reference wallet implementation==

Custom Copay implementation : https://github.com/commerceblock/copay ([[https://github.com/commerceblock/copay/pull/1|pull_request]])

==Reference==

* [[bip-0032.mediawiki|BIP32 - Hierarchical Deterministic Wallets]]
* [[bip-0043.mediawiki|BIP43 - Purpose Field for Deterministic Wallets]]
* [[bip-0044.mediawiki|BIP44 - Multi-Account Hierarchy for Deterministic Wallets]]
* [[https://arxiv.org/abs/1212.3257|Homomorphic Payment Addresses and the Pay-to-Contract Protocol]]

==Copyright==

This document is placed in the public domain.
